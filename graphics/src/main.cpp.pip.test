#include <Arduino.h>
#include <avr8-stub.h>
#include <string.h>
#include <TouchScreen.h>

#include "ili9341.h"
#include "graphics.h"
#include "util.h"
#include "font.h"

#include "oxanium.h"

void init_input();
uint8_t get_input();
int build_polygon(int n_vertices, vertex_t *vbuf, int **ibuf, int radius, uint16_t color);
int build_rectangle(int width, int height, vertex_t *vbuf, int **ibuf, uint16_t color);

TouchScreen t(A2, A3, A0, A1, 300);

font_t ox;
element_t poly, circ;

void setup() {
	Serial.begin(9600);
	init_display();
	r_init();
	set_line_width(LINE_WIDTH_2);

	f_setup(&ox, oxanium, 0x5555, 20, 1);
	circ = new_element((vec2) {-160, 120}, 3, NULL, DRAW_LINE_LOOP);
	poly = new_element(ORIGIN, 8, NULL, DRAW_LINES);
	build_polygon(poly.n_vertices, poly.vbuf, &poly.ibuf, 80, 0xFFFF);
	build_polygon(circ.n_vertices, circ.vbuf, &circ.ibuf, 5, 0x8888);

	e_bake_matrix(&poly);
	e_draw(&poly, 0);

	e_bake_matrix(&circ);
	e_draw(&circ, 0);
}

int drawn = 0;
void loop() {
	if (e_pip(&poly, circ.pos)) {
		f_draw(&ox, "INSIDE", 6, ORIGIN, ox.color);
		drawn = 1;
	} else if (drawn) {
		f_draw(&ox, "INSIDE", 6, ORIGIN, 0);
		drawn = 0;
	}

	circ.pos.x = (circ.pos.x < 110) ? circ.pos.x + 20 : -160;
	if (circ.pos.x == -160) circ.pos.y = (circ.pos.y > -120) ? circ.pos.y - 20 : 120;
	e_draw_auto(&circ);

	poly.rot += 0.2f;
	e_draw_auto(&poly);

	delay(100);
}

int build_polygon(int n_vertices, vertex_t *vbuf, int **ibuf, int radius, uint16_t color) {
	if (!vbuf || !ibuf || n_vertices <= 0) {
		return -1;
	}

	(*ibuf) = (int*) malloc(sizeof(int) * n_vertices);
	float r = DEG_TO_RAD * (360 / n_vertices);
	mat3 o = IDENT_MAT3;
	vec3 v = { 1, 1, 1 };

	scale_mat3((vec3){radius, radius, 1}, &o);
	rotate_mat3(r, &o);

	for (int i = 0; i < n_vertices; i += 1) {
		// compute color
		vbuf[i].color = color;
		transform_vec3(&o, &v, &vbuf[i].pos);
		(*ibuf)[i] = i;
		rotate_mat3(r, &o);
	}

	return 0;
}

int build_rectangle(int width, int height, vertex_t *vbuf, int **ibuf, uint16_t color) {
	if (!vbuf || !ibuf) {
		return -1;
	}

	int w2 = width / 2, h2 = height / 2;
	(*ibuf) = (int*) malloc(sizeof(int) * 4);
	for (int i = 0; i < 4; i += 1) {
		(*ibuf)[i] = i;
		vbuf[i].color = color;
	}

	vbuf[0].pos = (vec3) {w2, h2, 1};
	vbuf[1].pos = (vec3) {-w2, h2, 1};
	vbuf[2].pos = (vec3) {-w2, -h2, 1};
	vbuf[3].pos = (vec3) {w2, -h2, 1};

	return 0;
}
